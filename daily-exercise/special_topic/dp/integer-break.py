# -*- coding: utf-8 -*-
# @Time    : 2022/8/8 10:29
# @Author  : kevin
# @Version : python 3.7
# @Desc    : 整数拆分，求拆分项最大乘积


class Solution:
    def integerBreak(self, n):
        dp = [0] * (n + 1)  # 初始化数组：0和1无意义不算，则需要n+1长度数组
        dp[2] = 1  # 初始化题目所给条件，2拆分最大乘积为1，0/1无意义不初始化
        for i in range(3, n + 1):  # 从3三开始到n结束
            for j in range(1, i - 1):  # j是拆分值，从1开始有意义；到i-2结束，因为j=i-1时，i-j=1，和j=1时等价不需要重复计算（算也没问题）；
                # i可以差分为i - j和j。由于需要最大值，故需要通过j遍历所有存在的值，取其中最大的值作为当前i的最大值，在求最大值的时候，一个是j与i - j相乘，一个是j与dp[i - j].
                # 假设对正整数 i 拆分出的第一个正整数是 j（1 <= j < i），则有以下两种方案：
                # 1) 将 i 拆分成 j 和 i−j 的和，且 i−j 不再拆分成多个正整数，此时的乘积是 j * (i-j)
                # 2) 将 i 拆分成 j 和 i−j 的和，且 i−j 继续拆分成多个正整数，此时的乘积是 j * dp[i-j]
                dp[i] = max(dp[i], max(j * (i - j), j * dp[i - j]))  # 状态转移，j和i-j乘积，或者j和i-j的拆分项最大乘积的乘积
        return dp[n]  # 返回n的最大乘积即可
